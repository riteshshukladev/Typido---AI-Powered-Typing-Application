import React, { useEffect, useRef, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import MistralClient from "@mistralai/mistralai";
import "./TextGenerate.css";
import MainLogo from "./MainLogo";

const TextGenerate = () => {
  const [input, setInput] = useState("");
  const navigate = useNavigate();
  
  const [isWaiting, setIsWaiting] = useState(false);



  const originalText = "TYPIDO - AI POWERD TYPING APPLICATION";
  const smallText = "Enhance your knowledge and vocabulary with engaging typing practices on a variety of topics, from poems to famous book quotes, generated by AI. Track your progress with detailed stats and visual radar charts. Typido is not just about improving your typingâ€”it's about learning in a fun and efficient way!"



  const handleInputBtnClick = (e) => {
    setInput(e.target.value);
    // Set the waiting state to true
  };

  async function handleBtnClick() {
    setIsWaiting(true);
    try {
      const client = new MistralClient(import.meta.env.VITE_MISTRAL_API_KEY);
      const chatResponse = await client.chat({
        model: "open-mixtral-8x7b",
        messages: [
          {
            role: "user",
            content: `you're part of a typing application , the text you'll genererate on the topic of ${input} should be easy ,without any special characters ,any sorts of mathematical eqauation,  and the one and only primary language should be english only, generate the text accordingly in the length of 60 words - Only output the content that needs to be typed nothing more - Don't say that you are AI of anything. or don't mention anything it's just like your providing some info`,
          },
        ],
      });

      setIsWaiting(false); // Set the waiting state to false
      
      navigate("text" , {state: {output: chatResponse.choices[0].message.content}})
    } catch (error) {
      alert("An error occurred. Please try again later.");
      setIsWaiting(false);
    }
  }

  const handleClear = () => {
    setInput("");
  };

  return (
    <div id="generate__parent_container">
      <section className="header">
      
        <MainLogo className="logo_svg"/>
        <h6 className="small_text">{ smallText}</h6>
      </section>
      <div className="input-and-submit">
        <div className="input__clear">
          <input
            type="text"
            placeholder="Name a topic to generate text on..."
            value={input}
            onChange={handleInputBtnClick}
            className="input-field"
          />
          {input && (
            <button className="clear_button" onClick={handleClear}>
              &#10005;
            </button>
          )}
        </div>
        <button
          className="generate_button"
          onClick={handleBtnClick}
          disabled={!input}
        >
          Generate
        </button>
      </div>
      <span className="output-loader text-white pt-8 text-sm font-light	">
        {
          isWaiting && <p>Waiting for the response...</p>
        }
      </span>

      <div className="background_effect">
      </div>
    </div>
  );
};

export default TextGenerate;
